(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x => x
  end.

Parameter factorielle: Numbers.BinNums.Z -> Numbers.BinNums.Z.

Axiom factorielle_zero : ((factorielle 0%Z) = 1%Z).

Axiom factorielle_succ :
  forall (n:Numbers.BinNums.Z), (0%Z <= n)%Z ->
  ((factorielle (n + 1%Z)%Z) = ((n + 1%Z)%Z * (factorielle n))%Z).

Parameter if_term:
  Numbers.BinNums.Z -> Numbers.BinNums.Z -> Init.Datatypes.bool.

Axiom if_term'def :
  forall (n:Numbers.BinNums.Z) (i:Numbers.BinNums.Z),
  ((i < n)%Z -> ((if_term n i) = Init.Datatypes.true)) /\
  (~ (i < n)%Z -> ((if_term n i) = Init.Datatypes.false)).

(* Why3 goal *)
Theorem factorielle_ascendant'vc :
  forall (n:Numbers.BinNums.Z), (0%Z <= n)%Z ->
  (((factorielle 0%Z) = 1%Z) /\ (0%Z <= 0%Z)%Z /\ (0%Z <= n)%Z) /\
  (forall (r:Numbers.BinNums.Z) (i:Numbers.BinNums.Z),
   ((factorielle i) = r) /\ (0%Z <= i)%Z /\ (i <= n)%Z ->
   ((i < n)%Z ->
    (forall (i1:Numbers.BinNums.Z), (i1 = (i + 1%Z)%Z) ->
     (forall (r1:Numbers.BinNums.Z), (r1 = (i1 * r)%Z) ->
      ((0%Z <= (n - i)%Z)%Z /\ ((n - i1)%Z < (n - i)%Z)%Z) /\
      ((factorielle i1) = r1) /\ (0%Z <= i1)%Z /\ (i1 <= n)%Z))) /\
   (~ (i < n)%Z -> ((factorielle n) = r))).
Proof.
intros n h1.

Qed.

